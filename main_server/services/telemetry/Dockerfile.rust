# Stage 1: Cargo chef planner
FROM lukemathwalker/cargo-chef:latest-rust-1.70.0 AS chef
WORKDIR /app
RUN apt-get update && apt-get install -y cmake protobuf-compiler

# Stage 2: Compute recipe
FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

# Stage 3: Cache dependencies
FROM chef AS cacher
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

# Stage 4: Builder
FROM chef AS builder
COPY . .
COPY --from=cacher /app/target target
COPY --from=cacher /usr/local/cargo /usr/local/cargo
RUN cargo build --release

# Stage 5: Security scanner
FROM aquasec/trivy:latest AS security-scan
WORKDIR /scan
COPY --from=builder /app .
RUN trivy filesystem --no-progress --ignore-unfixed --severity HIGH,CRITICAL .

# Stage 6: Runtime
FROM debian:bullseye-slim AS runtime
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl1.1 \
    libpq5 \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r telemetry \
    && useradd -r -g telemetry telemetry

# Copy binary and config
COPY --from=builder /app/target/release/telemetry-service /usr/local/bin/
COPY config/telemetry.toml /etc/telemetry/config.toml

# Set up environment
ENV RUST_LOG=info \
    CONFIG_PATH=/etc/telemetry/config.toml \
    METRICS_PORT=9090

# Create data directory
RUN mkdir -p /var/lib/telemetry/data \
    && chown -R telemetry:telemetry /var/lib/telemetry

# Set up healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${METRICS_PORT}/health || exit 1

# Switch to non-root user
USER telemetry

# Expose metrics port
EXPOSE ${METRICS_PORT}

# Start application
CMD ["telemetry-service"]

# Labels
LABEL maintainer="AHECS Team <team@ahecs.io>" \
      version="1.0.0" \
      description="Telemetry Processing Service for Rabere Habitat" \
      org.opencontainers.image.source="https://github.com/ahecs/telemetry-service" \
      org.opencontainers.image.licenses="Proprietary" 